type Todo {
  id: ID!
  name: String!
  description: String
  comments(filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection
  location: Location
  createdAt: AWSDateTime
}

type Comment {
  id: ID!
  content: String
  todo: Todo
  createdAt: AWSDateTime
}

type Location {
  lat: Float
  lon: Float
}

input LocationInput {
  lat: Float
  lon: Float
}

type CommentConnection {
  items: [Comment]
  nextToken: String
}

type TodoConnection {
  items: [Todo]
  total: Int
  nextToken: String
}

type Query {
  commentsForTodo(todoId: ID!, limit: Int, nextToken: String): CommentConnection
  echo(msg: String): String
  nearbyTodos(location: LocationInput!, km: Int): TodoConnection
  getTodo(id: ID!): Todo
  listTodos(filter: ModelTodoFilterInput, limit: Int, nextToken: String): ModelTodoConnection
  getComment(id: ID!): Comment
  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection
  searchTodos(filter: SearchableTodoFilterInput, sort: SearchableTodoSortInput, limit: Int, nextToken: Int): SearchableTodoConnection
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTodoConnection {
  items: [Todo]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelTodoFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  description: ModelStringFilterInput
  createdAt: ModelStringFilterInput
  and: [ModelTodoFilterInput]
  or: [ModelTodoFilterInput]
  not: ModelTodoFilterInput
}

input CreateTodoInput {
  id: ID
  name: String!
  description: String
  location: LocationInput
  createdAt: AWSDateTime
}

input UpdateTodoInput {
  id: ID!
  name: String
  description: String
  location: LocationInput
  createdAt: AWSDateTime
}

input DeleteTodoInput {
  id: ID
}

type Mutation {
  createTodo(input: CreateTodoInput!): Todo
  updateTodo(input: UpdateTodoInput!): Todo
  deleteTodo(input: DeleteTodoInput!): Todo
  createComment(input: CreateCommentInput!): Comment
  updateComment(input: UpdateCommentInput!): Comment
  deleteComment(input: DeleteCommentInput!): Comment
}

type Subscription {
  onCreateTodo: Todo @aws_subscribe(mutations: ["createTodo"])
  onUpdateTodo: Todo @aws_subscribe(mutations: ["updateTodo"])
  onDeleteTodo: Todo @aws_subscribe(mutations: ["deleteTodo"])
  onCreateComment: Comment @aws_subscribe(mutations: ["createComment"])
  onUpdateComment: Comment @aws_subscribe(mutations: ["updateComment"])
  onDeleteComment: Comment @aws_subscribe(mutations: ["deleteComment"])
}

type ModelCommentConnection {
  items: [Comment]
  nextToken: String
}

input ModelCommentFilterInput {
  id: ModelIDFilterInput
  content: ModelStringFilterInput
  createdAt: ModelStringFilterInput
  and: [ModelCommentFilterInput]
  or: [ModelCommentFilterInput]
  not: ModelCommentFilterInput
}

input CreateCommentInput {
  id: ID
  content: String
  createdAt: AWSDateTime
  commentTodoId: ID
}

input UpdateCommentInput {
  id: ID!
  content: String
  createdAt: AWSDateTime
  commentTodoId: ID
}

input DeleteCommentInput {
  id: ID
}

input SearchableStringFilterInput {
  ne: String
  eq: String
  match: String
  matchPhrase: String
  matchPhrasePrefix: String
  multiMatch: String
  exists: Boolean
  wildcard: String
  regexp: String
}

input SearchableIDFilterInput {
  ne: ID
  eq: ID
  match: ID
  matchPhrase: ID
  matchPhrasePrefix: ID
  multiMatch: ID
  exists: Boolean
  wildcard: ID
  regexp: ID
}

input SearchableIntFilterInput {
  ne: Int
  gt: Int
  lt: Int
  gte: Int
  lte: Int
  eq: Int
  range: [Int]
}

input SearchableFloatFilterInput {
  ne: Float
  gt: Float
  lt: Float
  gte: Float
  lte: Float
  eq: Float
  range: [Float]
}

input SearchableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input SearchableTodoFilterInput {
  id: SearchableIDFilterInput
  name: SearchableStringFilterInput
  description: SearchableStringFilterInput
  createdAt: SearchableStringFilterInput
  and: [SearchableTodoFilterInput]
  or: [SearchableTodoFilterInput]
  not: SearchableTodoFilterInput
}

enum SearchableSortDirection {
  asc
  desc
}

enum SearchableTodoSortableFields {
  id
  name
  description
  createdAt
}

input SearchableTodoSortInput {
  field: SearchableTodoSortableFields
  direction: SearchableSortDirection
}

type SearchableTodoConnection {
  items: [Todo]
  nextToken: String
}
